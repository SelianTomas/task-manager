from django import forms
from django.utils import timezone
from django.core.exceptions import ValidationError
from .models import Task


class TaskForm(forms.ModelForm):
    class Meta:
        model = Task
        fields = ['title', 'description', 'due_date', 'completed']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Zadajte n√°zov √∫lohy...',
                'maxlength': 200,
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-control',
                'placeholder': 'Podrobn√Ω popis √∫lohy (voliteƒæn√©)...',
                'rows': 4,
            }),
            'due_date': forms.DateInput(attrs={
                'class': 'form-control',
                'type': 'date',
                'min': timezone.now().date().isoformat(),
            }),
            'completed': forms.CheckboxInput(attrs={
                'class': 'form-check-input',
            }),
        }
        labels = {
            'title': 'üìå N√°zov √∫lohy',
            'description': 'üìù Popis',
            'due_date': 'üìÖ Term√≠n splnenia',
            'completed': '‚úÖ Dokonƒçen√©',
        }
        help_texts = {
            'title': 'Kr√°tky a v√Ωsti≈æn√Ω n√°zov √∫lohy (povinn√©)',
            'description': 'Podrobnej≈°√≠ popis √∫lohy, pozn√°mky (voliteƒæn√©)',
            'due_date': 'D√°tum, kedy m√° by≈• √∫loha dokonƒçen√°',
            'completed': 'Oznaƒçte, ak je √∫loha u≈æ dokonƒçen√°',
        }

    def clean_title(self):
        """Valid√°cia n√°zvu √∫lohy"""
        title = self.cleaned_data.get('title')

        if not title:
            raise ValidationError('N√°zov √∫lohy je povinn√Ω!')

        title = title.strip()

        if len(title) < 3:
            raise ValidationError('N√°zov √∫lohy mus√≠ ma≈• aspo≈à 3 znaky!')

        if len(title) > 200:
            raise ValidationError('N√°zov √∫lohy je pr√≠li≈° dlh√Ω (max. 200 znakov)!')

        # Kontrola duplicitn√Ωch √∫loh (len pre nov√© √∫lohy)
        if not self.instance.pk:
            if Task.objects.filter(title__iexact=title).exists():
                raise ValidationError('√öloha s t√Ωmto n√°zvom u≈æ existuje!')

        return title

    def clean_description(self):
        """Valid√°cia popisu √∫lohy"""
        description = self.cleaned_data.get('description')

        if description:
            description = description.strip()

            if len(description) > 1000:
                raise ValidationError('Popis je pr√≠li≈° dlh√Ω (max. 1000 znakov)!')

        return description

    def clean_due_date(self):
        """Valid√°cia term√≠nu splnenia"""
        due_date = self.cleaned_data.get('due_date')

        if due_date:
            today = timezone.now().date()

            # Varovanie pre minul√© d√°tumy (ale neblokujeme ich)
            if due_date < today:
                # Pre aktualiz√°ciu existuj√∫cej √∫lohy povol√≠me minul√© d√°tumy
                if self.instance.pk:
                    return due_date
                else:
                    raise ValidationError('Term√≠n splnenia nem√¥≈æe by≈• v minulosti!')

            # Varovanie pre pr√≠li≈° vzdialen√© d√°tumy
            max_date = today.replace(year=today.year + 2)
            if due_date > max_date:
                raise ValidationError('Term√≠n splnenia je pr√≠li≈° vzdialen√Ω (max. 2 roky)!')

        return due_date

    def clean(self):
        """Celkov√° valid√°cia formul√°ra"""
        cleaned_data = super().clean()
        title = cleaned_data.get('title')
        due_date = cleaned_data.get('due_date')
        completed = cleaned_data.get('completed')

        # Ak je √∫loha oznaƒçen√° ako dokonƒçen√°, ale nem√° term√≠n, nastav√≠ sa na dnes
        if completed and not due_date:
            cleaned_data['due_date'] = timezone.now().date()

        # Kontrola logiky - dokonƒçen√° √∫loha s bud√∫cim term√≠nom
        if completed and due_date and due_date > timezone.now().date():
            # Len upozornenie, nie chyba
            self.add_error(None, 'Pozor: Oznaƒçujete √∫lohu ako dokonƒçen√∫, ale term√≠n je v bud√∫cnosti.')

        return cleaned_data


class TaskSearchForm(forms.Form):
    """Formul√°r pre vyhƒæad√°vanie a filtrovanie √∫loh"""
    search = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'üîç Hƒæada≈• √∫lohy...',
        }),
        label='Vyhƒæad√°vanie'
    )

    STATUS_CHOICES = [
        ('', 'V≈°etky √∫lohy'),
        ('completed', 'Dokonƒçen√©'),
        ('pending', 'ƒåakaj√∫ce'),
        ('overdue', 'Po term√≠ne'),
    ]

    status = forms.ChoiceField(
        choices=STATUS_CHOICES,
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control',
        }),
        label='Stav'
    )

    DUE_CHOICES = [
        ('', 'V≈°etky term√≠ny'),
        ('today', 'Dnes'),
        ('week', 'Tento t√Ω≈æde≈à'),
        ('month', 'Tento mesiac'),
    ]

    due_filter = forms.ChoiceField(
        choices=DUE_CHOICES,
        required=False,
        widget=forms.Select(attrs={
            'class': 'form-control',
        }),
        label='Term√≠n'
    )

    SORT_CHOICES = [
        ('created_at', 'D√°tum vytvorenia'),
        ('title', 'N√°zov'),
        ('due_date', 'Term√≠n splnenia'),
        ('completed', 'Stav'),
    ]

    sort_by = forms.ChoiceField(
        choices=SORT_CHOICES,
        required=False,
        initial='created_at',
        widget=forms.Select(attrs={
            'class': 'form-control',
        }),
        label='Zoradi≈• podƒæa'
    )

    ORDER_CHOICES = [
        ('desc', 'Zostupne'),
        ('asc', 'Vzostupne'),
    ]

    order = forms.ChoiceField(
        choices=ORDER_CHOICES,
        required=False,
        initial='desc',
        widget=forms.Select(attrs={
            'class': 'form-control',
        }),
        label='Poradie'
    )